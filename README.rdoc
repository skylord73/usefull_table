#=UsefullTable
#table_for generate a full-optionals table, with excel export, columns ordering, links, inline edit and monitoring (ActsAsMonitor gem)
#but don't warry because of a rich set of defaults, make its use very simple
#
#==Setup
#Add this line to your application's Gemfile:
# gem 'usefull_table'
#
#then execute
#  $ bundle install
#
#or install it yourself as:
# $ sudo gem install usefull_table
#
#copy icons, javascript and stylesheets:
# $ rails g usefull_table:install
#
#==Usage
#Write few lines in your controller
# app/controllers/home_controller.rb
# def index
#   @search = Item.search(params[:search])
#   ...
#   respond_to do |format|
#     format.html { @items = @search.paginate(:page => params[:page]) }
#   end
#   ...
# end
#
#and in your view
# app/views/home/my_view.html.erb
# <%= table_for @items, @search, options = {} do |t| %>
#   <% t.show :url => Proc.new { |item| item_path(item)} %>
#   <% t.edit :url => Proc.new { |item| edit_item_path(item)}%>
#   <% t.destroy :url => Proc.new { |item| item_path(item)}, :link_options => {:method => delete, :confirm => "are you sure?"} %>
#   <% t.download :url => Proc.new { |item| download_item_path(item)} %>
#   <% t.col :name %>
#   <% t.col "user.name" %>
#   <% t.status %>
# <% end %>
#
#==Options
#default values in *bold*
#
#===Paginator
# options[:paginator][:visible] = *true* | false  _note_: false if @items not present
# options[:paginator][:class] = *"usefull_table_paginator"*
#    
#===Container
# options[:html] =  *{:class => "usefull_table_container"}*
#
#===Excel
# options[:excel][:visible] = *true* | false
# options[:excel][:filter] = *true* | false   _note:_ false if @search not present
# options[:excel][:human] = *true* | false
# options[:excel][:worksheet] = *object.class.name.gsub(/::/,"#")*  _note:_ class name with namespace separator #
#
#===Table
# options[:table][:div_html] =  *{:class => "usefull_table"}*
# options[:table][:header_html] = *{:class => "first_row"}*
# options[:table][:header_type] = *:sort*   _note:_ :human if @search not present (no sorting possible)
#                                               :plain    bare column name from ActiveRecord
#                                               :human  column name humanized by ActiveRecord
#                                               :nil      no column name
#    
#==Localization
#Uses standard ActiveRecord localization to render tables and columns names
# it:
#   activerecord:
#     attributes:
#       item:
#        name: Name
#        type: Type
#       user:
#        name: Name
#    models:
#      item:
#        one: Item
#        other: Items
#      user:
#        one: User
#        other: Users
#  
# #config/usefull_table.it.yml
# it:
#   usefull_table:
#     submit_excel: Excel
#     header_error: Errore
#     body_error: Errore
#   
#   icons:
#     show: "usefull_table_show.png"
#     edit: "usefull_table_edit.png"
#     destroy: "usefull_table_destroy.png"
#     download: "usefull_table_download.png" 
#
#=col
#Render column value
#
#==Usage #col
# <% t.col :name %>               #render column :name ( t.col "name" is ok)
# <% t.col "user.name" %>      #render column name of the user collection in item (item.user.name)
#
#==Options
# :header_type =>
#   *:sort*     #Header is MetaSearch#sort_link of columns_name
#   :human      #Header is plain text humanized with ActiveRecord column name
#   :nil          #No header
#   
# :label =>
#   "Custom Name"      #plain text without localization
#   :custom_name        #localized text in lazy context (.)
#   
# :data_type =>     #default get class name from object to render
#   :Date | :Time | :DateTime | :Currency
#   
# :url => "static_path" or Proc       #Proc expose the object instance of the current row
#=label
#Render static label
#
#==Usage
# <% t.label object %>               #render object.inspect
# <% t.label Proc.new {|item| item.name.capitalize} %>               #Evaluate proc with item instance of the corresponding row
#
#=monitor
#Render a tri-state icon to monitor model status
#*  Red : Error
#*  Yellow: Warning
#*  Green: Status ok
#
#==Usage
# <% t.monitor %>
#
#Clicking the icon you get the comlete problem description pushed by Ajaxs script (no page reload)
#
#=link
#Create a link to something, using Icons or CustomText
#==Usage
# <% t.show :url => Proc.new {|object| home_path(object) }"%>
# <% t.destroy :url => Proc.new {|object| home_path(object) }"%>
# <% t.link :name => "Custom Link",  :url => Proc.new {|object| my_link_home_path(object) }"%>    #text link (Custom Link) to url 
# <% t.link :name => "Custom Link",  :body_typ => :icon,  :url => Proc.new {|object| my_link_home_path(object) }"%>    #icon link with icon name = usefull_table_cusom_link.png or localization in usefull_table.icons.custom_link 
#
#==Options
# :url => Proc or string
# :label => :show_doc localized in lazy contest (.)
#               "Show Doc" printed without localization
# :link_options =>  *nil* | {:method => delete, :confirm => "sicuro?"} if name == :destroy
# :name => :symbol or "string"    #if method_name == :link the name is used as link_text (localized if symbol), ignored elsewhere


